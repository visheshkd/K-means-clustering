# -*- coding: utf-8 -*-
"""my_kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIDKcMHlJkJAjHcfAqGgVS9UpQ6Z9XFx
"""

import numpy as np
import matplotlib.pyplot as plt
import copy as cp

dataset1=np.random.multivariate_normal([1,0],[[0.9,0.4],[0.4,0.9]],500)
dataset2=np.random.multivariate_normal([0,1.5],[[0.9,0.4],[0.4,0.9]],500)
X=np.append(dataset1,dataset2,axis=0)
#print(X.shape)-(1000,2)
n=X.shape[0]#No. of objects , (p=X.shape[1])-No. of attributes
k= int(input('Number of clusters : ')) #k clusters
c=[] # intial centers
for i in range(k):
  x,y=input('Intial Centers :').split()
  c.append([x,y])
for i in range(len(c)):
  for j in range(len(c[0])):
    c[i][j]=float(c[i][j])
c=np.array(c)
c=c.T
no_of_iterations = 10000
def mykmeans(X, k, c):
  iterations_take = 0 #How many iterations did it take to found centers for each cluster
  #create an array for distances wrt to number of objects n
  for i in range(no_of_iterations):
    distances=np.array([]).reshape(n,0)
    for j in range(k):
      l2_norm=np.sqrt(np.sum((X-c[:,j])**2,axis=1)) #Euclidean distance between the centroid/center and the object data point
      distances=np.c_[distances, l2_norm]
    C=np.argmin(distances,axis=1)+1 # finding the minimum distance between centroid and object data point so that we can create clusters accordingly.(finding nearest centroid)
    previous_center=np.zeros(c.shape)
    previous_center=cp.deepcopy(c)
    Y={} #storing the results i.e clusters and data-points assigned to that respective clusters. 
    for i in range(k):
      Y[i+1]=np.array([]).reshape(2,0)
    for j in range(n):
      Y[C[j]]=np.c_[Y[C[j]],X[j]] #cluster_no. - data points(x1,x2....xn). Assign the point xi to the respective cluster j.
    for x in range(k):
      Y[x+1]=Y[x+1].T #transpose
    for i in range(k):
      c[:,i]=np.mean(Y[i+1],axis=0)#mean of all points xi assigned to the cluster j gives new centroid(updated center).
    iterations_take+=1
    if(np.linalg.norm((previous_center - c),axis=None))<=0.001:
      break

    #Graph-Plot for visualization
  plt.scatter(X[:,0],X[:,1],c='black',label="data points")
  plt.xlabel('X')
  plt.ylabel('Y')
  plt.title("Data points : Before Clustering")
  plt.legend()
  plt.show()
  colors=['Blue', 'red', 'green', 'magenta',]
  labels=['Cluster-1', 'Cluster-2', 'Cluster-3', 'Cluster-4']
  for i in range(k):
    plt.scatter(Y[i+1][:,0], Y[i+1][:,1], c=colors[i], label=labels[i])
  plt.scatter(c[0,:], c[1,:], s=150, c='yellow', label='centroids')
  plt.xlabel('X')
  plt.ylabel('Y')
  plt.title("Kmeans Clustering")
  plt.legend()
  plt.show()
  print('Iterations it took :',iterations_take)
  return Y
cluster=mykmeans(X,k,c)
